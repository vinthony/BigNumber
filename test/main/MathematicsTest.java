package main;

import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;

public class MathematicsTest {

    @Before
    public void setUp() throws Exception {

    }

    @Test
    public void testAdd() throws Exception {
        /*
        * #1 测试输入数据合法性 由于检测数据合法性方法相同，故只在加法部分进行输入数据合法性测试
        * #2 常规测试
        * #3 进位加法
        * #4 负数加法
        * #5 超长整数
        * #6 不同位加法
        * */
        Mathematics instance = new Mathematics();
        assertEquals(instance.Add("0","0"),"0");//#1
        assertEquals(instance.Add("",""),"");//#1
        assertEquals(instance.Add("","0"),"");//#1
        assertEquals(instance.Add("a5","33"),"error");//#1
        assertEquals(instance.Add("+12131-331","3"),"error");//#1
        assertEquals(instance.Add("21313-21311","333333"),"error");//#1
        assertEquals(instance.Add("-------1","3"),"2");//#2
        assertEquals(instance.Add("1","2"),"3");//#2
        assertEquals(instance.Add("10000","1"),"10001");//#2 #6
        assertEquals(instance.Add("-9","1"),"-8");//#4
        assertEquals(instance.Add("-9","-1"),"-10");//#4 #3
        assertEquals(instance.Add("1213131","3"),"1213134");//#2 #6
        assertEquals(instance.Add("6549876541649875487989121364","9854225774125485623215"),"6549886395875649613474744579");//#5
        assertEquals(instance.Add(


                ),

                );//#5
    }

    @Test
    public void testSub() throws Exception {
        /*
        * #1 常规减法
        * #2 借位减法
        * #3 不同位减法
        * #4 大数减法
        * #5 负数减法
        * */
        Mathematics instance = new Mathematics();
        assertEquals(instance.Sub("0","0"),"0");//#1
        assertEquals(instance.Sub("1", "2"),"-1");//#1
        assertEquals(instance.Sub("10000", "1"),"9999");//#2 #3
        assertEquals(instance.Sub("99", "99"),"0");//#1
        assertEquals(instance.Sub("10000000000000000000", "1"),"9999999999999999999");//#4
        assertEquals(instance.Sub("200", "-80"),"280");//#5
        assertEquals(instance.Sub("-100", "-1"),"-99");//#2 #3
        assertEquals(instance.Sub("-10000","3"),"-10003");//#2 #3 #5
        assertEquals(instance.Sub("10000","3"),"9997");// #2
        assertEquals(instance.Sub(



                );//#4
        assertEquals(instance.Sub("20002000","1000"),"20001000");//#3 被减数大于减数
        assertEquals(instance.Sub(
                        "2000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000200000000000000000002000000000000000000020000000000000000000",


        );
        assertEquals(instance.Sub("1000","20001000"),"-20000000");//#2 #3 #5
    }

    @Test
    public void testMul() throws Exception {
        /*
        * #1 常规乘法
        * #2 负数乘法
        * #3 多位x单位 or 单位x多位
        * #4 大数乘法
        * */
       Mathematics instance = new Mathematics();
        assertEquals(instance.Mul("10201","0"),"0");//#1
        assertEquals(instance.Mul("0","10201"),"0");//#1
        assertEquals(instance.Mul("3","5"),"15");//#1
        assertEquals(instance.Mul("-5","5"),"-25");//#2
        assertEquals(instance.Mul("5","-5"),"-25");//#2
        assertEquals(instance.Mul("-5","-5"),"25");//#2
        assertEquals(instance.Mul("100","3"),"300");//#3
        assertEquals(instance.Mul("3","100"),"300");//#3
        assertEquals(instance.Mul("12","12"),"144");//#1
        assertEquals(instance.Mul


                );//#4
    }

    @Test
    public void testDiv() throws Exception {
        /*
        * 并没有实现除法的小数部分显示。直接忽略
        * #1 常规除法
        * #2 负数乘法
        * #3 除数为0
        * #4 少位/多位 or 多位/少位
        *
        * */
        Mathematics instance = new Mathematics();
        assertEquals(instance.Div("100","1"),"100");//#1
        assertEquals(instance.Div("100","0"),"error");//#1
        assertEquals(instance.Div("1","100"),"0");//#4 #1
        assertEquals(instance.Div("1000","10"),"100");//#4 #1
        assertEquals(instance.Div("24","6"),"4");// #1 #4
        assertEquals(instance.Div("100","100"),"1");// #1
        assertEquals(instance.Div("8","4"),"2");//#1
        assertEquals(instance.Div("-100","10"),"-10"); //#2
        assertEquals(instance.Div("100","-10"),"-10");//#2
        assertEquals(instance.Div("-1000","-1000"),"1");//#2
    }
}